{"ast":null,"code":"import _toConsumableArray from\"/Users/jenyagrehova/Desktop/React-App-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/jenyagrehova/Desktop/React-App-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_FLORIST,ADD_ORDER,EDIT_ORDER_NAME,EDIT_ORDER_AUTHOR,REMOVE_ORDER,DOWNLOAD_ORDERS_DATA,MOVE_ORDER_LEFT,MOVE_ORDER_RIGHT}from'./actions';var initialState={florists:[]};export default function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var _ref=arguments.length>1?arguments[1]:undefined,type=_ref.type,payload=_ref.payload;var orderToMove=null;switch(type){case ADD_FLORIST:return _objectSpread(_objectSpread({},state),{},{florists:[].concat(_toConsumableArray(state.florists),[payload])});case ADD_ORDER:return _objectSpread(_objectSpread({},state),{},{florists:state.florists.map(function(orderArr,index){return index===payload.orderArrId?_objectSpread(_objectSpread({},orderArr),{},{orders:[].concat(_toConsumableArray(orderArr.orders),[payload.order])}):orderArr;})});case EDIT_ORDER_NAME:return _objectSpread(_objectSpread({},state),{},{florists:state.florists.map(function(orderArr,index){return index===payload.orderArrId?_objectSpread(_objectSpread({},orderArr),{},{orders:orderArr.orders.map(function(order,indexOrder){return indexOrder===payload.orderId?_objectSpread(_objectSpread({},order),{},{name:payload.newName}):order;})}):orderArr;})});case EDIT_ORDER_AUTHOR:return _objectSpread(_objectSpread({},state),{},{florists:state.florists.map(function(orderArr,index){return index===payload.orderArrId?_objectSpread(_objectSpread({},orderArr),{},{orders:orderArr.orders.map(function(order,indexOrder){return indexOrder===payload.orderId?_objectSpread(_objectSpread({},order),{},{author:payload.newAuthor}):order;})}):orderArr;})});case REMOVE_ORDER:return _objectSpread(_objectSpread({},state),{},{florists:state.florists.map(function(orderArr,index){return index===payload.orderArrId?_objectSpread(_objectSpread({},orderArr),{},{orders:orderArr.orders.filter(function(order,orderIndex){return orderIndex!==payload.orderId;})}):orderArr;})});case DOWNLOAD_ORDERS_DATA:return _objectSpread(_objectSpread({},state),{},{florists:payload});case MOVE_ORDER_LEFT:orderToMove=state.florists[payload.orderArrId].orders[payload.orderId];return _objectSpread(_objectSpread({},state),{},{florists:state.florists.map(function(orderArr,index){if(index===payload.orderArrId){return _objectSpread(_objectSpread({},orderArr),{},{orders:orderArr.orders.filter(function(order,orderIndex){return orderIndex!==payload.orderId;})});}if(index===payload.orderArrId-1){return _objectSpread(_objectSpread({},orderArr),{},{orders:[].concat(_toConsumableArray(orderArr.orders),[orderToMove])});}return orderArr;})});case MOVE_ORDER_RIGHT:orderToMove=state.florists[payload.orderArrId].orders[payload.orderId];return _objectSpread(_objectSpread({},state),{},{florists:state.florists.map(function(orderArr,index){if(index===payload.orderArrId){return _objectSpread(_objectSpread({},orderArr),{},{orders:orderArr.orders.filter(function(order,orderIndex){return orderIndex!==payload.orderId;})});}if(index===payload.orderArrId+1){return _objectSpread(_objectSpread({},orderArr),{},{orders:[].concat(_toConsumableArray(orderArr.orders),[orderToMove])});}return orderArr;})});default:return state;}};","map":{"version":3,"sources":["/Users/jenyagrehova/Desktop/React-App-master/src/store/reducer.js"],"names":["ADD_FLORIST","ADD_ORDER","EDIT_ORDER_NAME","EDIT_ORDER_AUTHOR","REMOVE_ORDER","DOWNLOAD_ORDERS_DATA","MOVE_ORDER_LEFT","MOVE_ORDER_RIGHT","initialState","florists","reducer","state","type","payload","orderToMove","map","orderArr","index","orderArrId","orders","order","indexOrder","orderId","name","newName","author","newAuthor","filter","orderIndex"],"mappings":"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","sourcesContent":["import {\n    ADD_FLORIST,\n    ADD_ORDER,\n    EDIT_ORDER_NAME,\n    EDIT_ORDER_AUTHOR,\n    REMOVE_ORDER,\n    DOWNLOAD_ORDERS_DATA,\n    MOVE_ORDER_LEFT,\n    MOVE_ORDER_RIGHT\n} from './actions';\n\nconst initialState = {\n    florists: []\n};\n\nexport default function reducer(state=initialState, {type, payload}) {\n    let orderToMove = null;\n\n    switch(type) {\n    case ADD_FLORIST:\n        return {\n            ...state,\n            florists: [\n                ...state.florists, payload\n            ]\n        };\n    case ADD_ORDER:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: [...orderArr.orders, payload.order]\n                }\n                : orderArr\n            ))\n        };\n    case EDIT_ORDER_NAME:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.map((order, indexOrder) => (\n                        indexOrder === payload.orderId ? {\n                            ...order,\n                            name: payload.newName\n                        }\n                        : order\n                    ))\n                }\n                : orderArr\n            ))\n        };\n    case EDIT_ORDER_AUTHOR:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.map((order, indexOrder) => (\n                        indexOrder === payload.orderId ? {\n                            ...order,\n                            author: payload.newAuthor\n                        }\n                        : order\n                    ))\n                }\n                : orderArr\n            ))\n        };\n    case REMOVE_ORDER:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                }\n                : orderArr\n            ))\n        };\n    case DOWNLOAD_ORDERS_DATA:\n        return {\n            ...state,\n            florists: payload\n        }\n    case MOVE_ORDER_LEFT:\n        orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => {\n                if (index === payload.orderArrId) {\n                    return {\n                        ...orderArr,\n                        orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                    };\n                }\n                if (index === payload.orderArrId - 1) {\n                    return {\n                        ...orderArr,\n                        orders: [...orderArr.orders, orderToMove]\n                    };\n                }\n                return orderArr;\n            })\n        };\n    case MOVE_ORDER_RIGHT:\n        orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => {\n                if (index === payload.orderArrId) {\n                    return {\n                        ...orderArr,\n                        orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                    };\n                }\n                if (index === payload.orderArrId + 1) {\n                    return {\n                        ...orderArr,\n                        orders: [...orderArr.orders, orderToMove]\n                    };\n                }\n                return orderArr;\n            })\n        };\n    default:\n        return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}