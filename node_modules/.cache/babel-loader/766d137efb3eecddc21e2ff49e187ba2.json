{"ast":null,"code":"import { ADD_FLORIST, ADD_ORDER, EDIT_ORDER_NAME, EDIT_ORDER_AUTHOR, REMOVE_ORDER, DOWNLOAD_ORDERS_DATA, MOVE_ORDER_LEFT, MOVE_ORDER_RIGHT } from './actions';\nconst initialState = {\n  florists: []\n};\nexport default function reducer(state = initialState, {\n  type,\n  payload\n}) {\n  let orderToMove = null;\n\n  switch (type) {\n    case ADD_FLORIST:\n      return { ...state,\n        florists: [...state.florists, payload]\n      };\n\n    case ADD_ORDER:\n      return { ...state,\n        florists: state.florists.map((orderArr, index) => index === payload.orderArrId ? { ...orderArr,\n          orders: [...orderArr.orders, payload.order]\n        } : orderArr)\n      };\n\n    case EDIT_ORDER_NAME:\n      return { ...state,\n        florists: state.florists.map((orderArr, index) => index === payload.orderArrId ? { ...orderArr,\n          orders: orderArr.orders.map((order, indexOrder) => indexOrder === payload.orderId ? { ...order,\n            name: payload.newName\n          } : order)\n        } : orderArr)\n      };\n\n    case EDIT_ORDER_AUTHOR:\n      return { ...state,\n        florists: state.florists.map((orderArr, index) => index === payload.orderArrId ? { ...orderArr,\n          orders: orderArr.orders.map((order, indexOrder) => indexOrder === payload.orderId ? { ...order,\n            author: payload.newAuthor\n          } : order)\n        } : orderArr)\n      };\n\n    case REMOVE_ORDER:\n      return { ...state,\n        florists: state.florists.map((orderArr, index) => index === payload.orderArrId ? { ...orderArr,\n          orders: orderArr.orders.filter((order, orderIndex) => orderIndex !== payload.orderId)\n        } : orderArr)\n      };\n\n    case DOWNLOAD_ORDERS_DATA:\n      return { ...state,\n        florists: payload\n      };\n\n    case MOVE_ORDER_LEFT:\n      orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n      return { ...state,\n        florists: state.florists.map((orderArr, index) => {\n          if (index === payload.orderArrId) {\n            return { ...orderArr,\n              orders: orderArr.orders.filter((order, orderIndex) => orderIndex !== payload.orderId)\n            };\n          }\n\n          if (index === payload.orderArrId - 1) {\n            return { ...orderArr,\n              orders: [...orderArr.orders, orderToMove]\n            };\n          }\n\n          return orderArr;\n        })\n      };\n\n    case MOVE_ORDER_RIGHT:\n      orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n      return { ...state,\n        florists: state.florists.map((orderArr, index) => {\n          if (index === payload.orderArrId) {\n            return { ...orderArr,\n              orders: orderArr.orders.filter((order, orderIndex) => orderIndex !== payload.orderId)\n            };\n          }\n\n          if (index === payload.orderArrId + 1) {\n            return { ...orderArr,\n              orders: [...orderArr.orders, orderToMove]\n            };\n          }\n\n          return orderArr;\n        })\n      };\n\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"sources":["/Users/jenyagrehova/Desktop/Recruiting11/src/store/reducer.js"],"names":["ADD_FLORIST","ADD_ORDER","EDIT_ORDER_NAME","EDIT_ORDER_AUTHOR","REMOVE_ORDER","DOWNLOAD_ORDERS_DATA","MOVE_ORDER_LEFT","MOVE_ORDER_RIGHT","initialState","florists","reducer","state","type","payload","orderToMove","map","orderArr","index","orderArrId","orders","order","indexOrder","orderId","name","newName","author","newAuthor","filter","orderIndex"],"mappings":"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","sourcesContent":["import {\n    ADD_FLORIST,\n    ADD_ORDER,\n    EDIT_ORDER_NAME,\n    EDIT_ORDER_AUTHOR,\n    REMOVE_ORDER,\n    DOWNLOAD_ORDERS_DATA,\n    MOVE_ORDER_LEFT,\n    MOVE_ORDER_RIGHT\n} from './actions';\n\nconst initialState = {\n    florists: []\n};\n\nexport default function reducer(state=initialState, {type, payload}) {\n    let orderToMove = null;\n\n    switch(type) {\n    case ADD_FLORIST:\n        return {\n            ...state,\n            florists: [\n                ...state.florists, payload\n            ]\n        };\n    case ADD_ORDER:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: [...orderArr.orders, payload.order]\n                }\n                : orderArr\n            ))\n        };\n    case EDIT_ORDER_NAME:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.map((order, indexOrder) => (\n                        indexOrder === payload.orderId ? {\n                            ...order,\n                            name: payload.newName\n                        }\n                        : order\n                    ))\n                }\n                : orderArr\n            ))\n        };\n    case EDIT_ORDER_AUTHOR:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.map((order, indexOrder) => (\n                        indexOrder === payload.orderId ? {\n                            ...order,\n                            author: payload.newAuthor\n                        }\n                        : order\n                    ))\n                }\n                : orderArr\n            ))\n        };\n    case REMOVE_ORDER:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                }\n                : orderArr\n            ))\n        };\n    case DOWNLOAD_ORDERS_DATA:\n        return {\n            ...state,\n            florists: payload\n        }\n    case MOVE_ORDER_LEFT:\n        orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => {\n                if (index === payload.orderArrId) {\n                    return {\n                        ...orderArr,\n                        orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                    };\n                }\n                if (index === payload.orderArrId - 1) {\n                    return {\n                        ...orderArr,\n                        orders: [...orderArr.orders, orderToMove]\n                    };\n                }\n                return orderArr;\n            })\n        };\n    case MOVE_ORDER_RIGHT:\n        orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => {\n                if (index === payload.orderArrId) {\n                    return {\n                        ...orderArr,\n                        orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                    };\n                }\n                if (index === payload.orderArrId + 1) {\n                    return {\n                        ...orderArr,\n                        orders: [...orderArr.orders, orderToMove]\n                    };\n                }\n                return orderArr;\n            })\n        };\n    default:\n        return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}