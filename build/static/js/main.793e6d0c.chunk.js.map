{"version":3,"sources":["model/model.js","store/actions.js","components/Order/Order.jsx","components/Florist/Florist.jsx","components/App/App.jsx","store/reducer.js","store/index.js","index.js"],"names":["hostname","getFlorists","a","fetch","method","response","status","Error","json","jsonData","addFlorist","orderArr","body","JSON","stringify","headers","info","console","log","addOrder","order","orderArrId","editOrder","orderId","newName","newAuthor","removeOrder","moveOrder","destShelfId","ADD_FLORIST","ADD_ORDER","EDIT_ORDER_NAME","EDIT_ORDER_AUTHOR","REMOVE_ORDER","DOWNLOAD_ORDERS_DATA","MOVE_ORDER_LEFT","MOVE_ORDER_RIGHT","Order","moveLeft","moveData","props","moveOrderLeftDispatch","moveRight","moveOrderRightDispatch","onRemove","window","confirm","removeData","removeOrderDispatch","onAuthorEdit","prompt","trim","alert","florists","orders","orderEditData","name","editOrderAuthorDispatch","onNameEdit","author","editOrderNameDispatch","this","className","onClick","PureComponent","connect","dispatch","type","payload","editOrderNameAction","editOrderAuthorAction","removeOrderAction","moveOrderLeftAction","moveOrderRightAction","Florist","onOrderAdd","orderName","orderAuthor","newOrderData","addOrderDispatch","map","index","addOrderAction","App","state","isInputActive","inputValue","inputFlorist","setState","onKeyDown","event","key","isInputState","orderArrName","addFloristDispatch","onInputChange","target","value","downloadOrdersDataDispatch","id","placeholder","onChange","addFloristAction","downloadOrdersDataAction","initialState","store","createStore","orderToMove","indexOrder","filter","orderIndex","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.793e6d0c.chunk.js","sourcesContent":["const hostname = 'http://localhost:9999';\n\nconst getFlorists = async () => {\n    const response = await fetch(hostname + '/orderarr', {method: 'GET'});\n    if (response.status !== 200) {\n        throw new Error(`getFlorists returned ${response.status}`);\n    }\n    const jsonData = await response.json();\n    return jsonData;\n};\n\nconst addFlorist = async (orderArr) => {\n    const response = await fetch(hostname + '/orderarr', {\n        method: 'POST', \n        body: JSON.stringify(orderArr),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    if (response.status !== 200) {\n        throw new Error(`addFlorist returned ${response.status}`);\n    }\n    const { info } = await response.json();\n    console.log(info);\n};\n\nconst addOrder = async ({ order, orderArrId }) => {\n    const response = await fetch(hostname + `/orderarr/${orderArrId}/order`, {\n        method: 'POST', \n        body: JSON.stringify(order),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    console.log(response);\n\n    if (response.status !== 200) {\n        throw new Error(`addOrder returned ${response.status}`);\n    }\n    const { info } = await response.json();\n    console.log(info);\n};\n\nconst editOrder = async ({ orderId, orderArrId, newName, newAuthor }) => {\n    const response = await fetch(hostname + `/orderarr/${orderArrId}/order/${orderId}`, {\n        method: 'PATCH', \n        body: JSON.stringify({ newName: newName, newAuthor: newAuthor }), \n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    if (response.status !== 200) {\n        throw new Error(`editOrderName returned ${response.status}`);\n    }\n    const { info } = await response.json();\n    console.log(info);\n};\n\nconst removeOrder = async ({ orderId, orderArrId }) => {\n    const response = await fetch(hostname + `/orderarr/${orderArrId}/order/${orderId}`, {\n        method: 'DELETE'\n    });\n\n    if (response.status !== 200) {\n        throw new Error(`removeOrder returned ${response.status}`);\n    }\n    const { info } = await response.json();\n    console.log(info);\n};\n\nconst moveOrder = async ({ orderId, orderArrId, destShelfId }) => {\n    const response = await fetch(hostname + `/orderarr/${orderArrId}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ orderId: orderId, destShelfId: destShelfId }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    if (response.status !== 200) {\n        throw new Error(`removeOrder returned ${response.status}`);\n    }\n    const { info } = await response.json();\n    console.log(info);\n};\n\nexport {\n    getFlorists,\n    addFlorist,\n    addOrder,\n    editOrder,\n    removeOrder,\n    moveOrder,\n};\n","const ADD_FLORIST = 'ADD_FLORIST';\nconst ADD_ORDER = 'ADD_ORDER';\nconst EDIT_ORDER_NAME = 'EDIT_ORDER_NAME';\nconst EDIT_ORDER_AUTHOR = 'EDIT_ORDER_AUTHOR';\nconst REMOVE_ORDER = 'REMOVE_ORDER';\nconst DOWNLOAD_ORDERS_DATA = 'DOWNLOAD_ORDERS_DATA';\nconst MOVE_ORDER_LEFT = 'MOVE_ORDER_LEFT';\nconst MOVE_ORDER_RIGHT = 'MOVE_ORDER_RIGHT';\n\n\nconst addFloristAction = (orderArr) => ({\n    type: ADD_FLORIST,\n    payload: orderArr\n});\n\nconst addOrderAction = ({ order, orderArrId }) => ({\n    type: ADD_ORDER,\n    payload: { order, orderArrId }\n});\n\nconst editOrderNameAction = ({ orderId, orderArrId, newName }) => ({\n    type: EDIT_ORDER_NAME,\n    payload: { orderId, orderArrId, newName }\n});\n\nconst editOrderAuthorAction = ({ orderId, orderArrId, newAuthor }) => ({\n    type: EDIT_ORDER_AUTHOR,\n    payload: { orderId, orderArrId, newAuthor }\n});\n\nconst removeOrderAction = ({ orderId, orderArrId }) => ({\n    type: REMOVE_ORDER,\n    payload: { orderId, orderArrId }\n});\n\nconst downloadOrdersDataAction = (florists) => ({\n    type: DOWNLOAD_ORDERS_DATA,\n    payload: florists\n});\n\nconst moveOrderLeftAction = ({ orderId, orderArrId }) => ({\n    type: MOVE_ORDER_LEFT,\n    payload: { orderId, orderArrId }\n});\n\nconst moveOrderRightAction = ({ orderId, orderArrId  }) => ({\n    type: MOVE_ORDER_RIGHT,\n    payload: { orderId, orderArrId }\n});\n\nexport {\n    ADD_FLORIST,\n    ADD_ORDER,\n    EDIT_ORDER_NAME,\n    EDIT_ORDER_AUTHOR,\n    REMOVE_ORDER,\n    DOWNLOAD_ORDERS_DATA,\n    MOVE_ORDER_LEFT,\n    MOVE_ORDER_RIGHT,\n    addFloristAction,\n    addOrderAction,\n    editOrderNameAction,\n    editOrderAuthorAction,\n    removeOrderAction,\n    downloadOrdersDataAction,\n    moveOrderLeftAction,\n    moveOrderRightAction\n};\n","import { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport './Order.css';\n\nimport { editOrder, removeOrder, moveOrder } from '../../model/model';\n\nimport { \n    editOrderNameAction,\n    editOrderAuthorAction,\n    removeOrderAction,\n    moveOrderLeftAction,\n    moveOrderRightAction\n} from '../../store/actions';\n\n\nclass Order extends PureComponent {\n\n    moveLeft = async () => {\n        const moveData = {\n            orderId: this.props.orderId,\n            orderArrId: this.props.orderArrId\n        };\n        await moveOrder({\n            ...moveData,\n            destShelfId: moveData.orderArrId - 1\n        });\n        this.props.moveOrderLeftDispatch(moveData);\n    }\n\n    moveRight = async () => {\n        const moveData = {\n            orderId: this.props.orderId,\n            orderArrId: this.props.orderArrId\n        };\n        await moveOrder({\n            ...moveData,\n            destShelfId: moveData.orderArrId + 1\n        });\n        this.props.moveOrderRightDispatch(moveData);\n    }\n\n    onRemove = async () => {\n        const ok = window.confirm('Удалить кандидата?');\n        if (!ok) {\n            return;\n        }\n\n        const removeData = {\n            orderId: this.props.orderId,\n            orderArrId: this.props.orderArrId\n        };\n        await removeOrder(removeData);\n        this.props.removeOrderDispatch(removeData);\n    }\n\n    onAuthorEdit = async () => {\n        let newAuthor = prompt('ИЗМЕНИТЬ ИМЯ КАНДИДАТА');\n        if (!newAuthor || !newAuthor.trim()) {\n            alert('Попробуйте еще раз');\n            return;\n        }\n\n        newAuthor = newAuthor.trim();\n\n        const order = this.props.florists[this.props.orderArrId].orders[this.props.orderId];\n        const orderEditData = {\n            orderId: this.props.orderId,\n            orderArrId: this.props.orderArrId,\n            newAuthor: newAuthor\n        };\n        await editOrder({\n            ...orderEditData,\n            newName: order.name\n        });\n        this.props.editOrderAuthorDispatch(orderEditData);\n    }\n\n    onNameEdit = async () => {\n        let newName = prompt('ИЗМЕНИТЬ ТРЕБОВАНИЯ');\n        if (!newName || !newName.trim()) {\n            alert('Попробуйте еще раз');\n            return;\n        }\n        \n        newName = newName.trim();\n\n        const order = this.props.florists[this.props.orderArrId].orders[this.props.orderId];\n        const orderEditData = {\n            orderId: this.props.orderId,\n            orderArrId: this.props.orderArrId,\n            newName: newName,\n        };\n        await editOrder({\n            ...orderEditData,\n            newAuthor: order.author\n        });\n        this.props.editOrderNameDispatch(orderEditData);\n    }\n\n    render() {\n        const { orderId, orderArrId } = this.props;\n        const order = this.props.florists[orderArrId].orders[orderId];\n\n        return (\n            <div className=\"orderarr-order\">\n                <div className=\"orderarr-order-description\">\n                <div className=\"orderarr-order-name\">\n                    { order.name }\n                </div>\n                <div className=\"orderarr-order-author\">\n                    { order.author }\n                </div>\n                </div>\n                \n                <div className=\"orderarr-order-controls\">\n                <div className=\"orderarr-order-controls-row\">\n                    <div className=\"orderarr-order-controls-icon left-arrow-icon\" onClick={this.moveLeft}></div>\n                    <div className=\"orderarr-order-controls-icon right-arrow-icon\" onClick={this.moveRight}></div>\n                </div>\n                <div className=\"orderarr-order-controls-row\">\n                    <div className=\"orderarr-order-controls-icon delete-icon\" onClick={this.onRemove}></div>\n                </div>\n                <div className=\"orderarr-order-controls-row\">\n                    <div className=\"orderarr-order-controls-icon editcust-icon\" onClick={this.onAuthorEdit}></div>\n                    <div className=\"orderarr-order-controls-icon editdesc-icon\" onClick={this.onNameEdit}></div>\n                </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ florists }) => ({ florists });\n\nconst mapDispatchToProps = dispatch => ({\n    editOrderNameDispatch: ({ orderId, orderArrId, newName }) => dispatch(editOrderNameAction({ orderId, orderArrId, newName })),\n    editOrderAuthorDispatch: ({ orderId, orderArrId, newAuthor }) => dispatch(editOrderAuthorAction({ orderId, orderArrId, newAuthor })),\n    removeOrderDispatch: ({ orderId, orderArrId }) => dispatch(removeOrderAction({ orderId, orderArrId })),\n    moveOrderLeftDispatch: ({ orderId, orderArrId }) => dispatch(moveOrderLeftAction({ orderId, orderArrId })),\n    moveOrderRightDispatch: ({ orderId, orderArrId }) => dispatch(moveOrderRightAction({ orderId, orderArrId })),\n});\n  \n  \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Order);\n","import { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport './Florist.css';\n\nimport { addOrder } from '../../model/model';\n\nimport Order from '../Order/Order';\nimport { addOrderAction } from '../../store/actions';\n\n\nclass Florist extends PureComponent {\n\n    onOrderAdd = async () => {\n        let orderName = prompt('ИМЯ КОНДИДАТА', '');\n        if (!orderName || !orderName.trim()) {\n            alert('Попробуйте еще раз!');\n            return;\n        }\n        orderName = orderName.trim();\n\n        let orderAuthor = prompt('ОПЫТ РАБОТЫ', '').trim();\n        if (!orderAuthor || !orderAuthor.trim()) {\n            alert('Попробуйте еще раз!');\n            return;\n        }\n\n        orderAuthor = orderAuthor.trim();\n        const newOrderData = {\n            order: {\n                name: orderName,\n                author: orderAuthor\n            },\n            orderArrId: this.props.orderArrId\n        };\n\n        await addOrder(newOrderData);\n        this.props.addOrderDispatch(newOrderData);\n    }\n\n    render() {\n        const orderArrId = this.props.orderArrId;\n        const orderArr = this.props.florists[orderArrId];\n\n        return (\n        <div className=\"orderarr\">\n            <header className=\"orderarr-name\">\n                { orderArr.name }\n            </header>\n            <div className=\"orderarr-orders\">\n                {orderArr.orders.map((order, index) => (\n                    <Order key={`order-${index}`} orderId={index} orderArrId={orderArrId} />\n                ))}\n            </div>\n            <footer className=\"orderarr-add-task\" onClick={this.onOrderAdd}>\n                Добавить заказ\n            </footer>\n        </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ florists }) => ({ florists });\n\nconst mapDispatchToProps = dispatch => ({\n    addOrderDispatch: ({ order, orderArrId }) => dispatch(addOrderAction({ order, orderArrId })),\n});\n  \nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Florist);\n","import { Fragment, PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport Florist from '../Florist/Florist';\n\nimport { getFlorists, addFlorist } from '../../model/model';\n\nimport { downloadOrdersDataAction, addFloristAction } from '../../store/actions';\nimport './App.css';\n\nclass App extends PureComponent {\n\n    state = {\n        isInputActive: false,\n        inputValue: ''\n    };\n\n    async componentDidMount() {\n        const florists = await getFlorists();\n        this.props.downloadOrdersDataDispatch(florists);\n    }\n\n    inputFlorist = () => {\n        this.setState({\n            isInputActive: true\n        });\n    }\n\n    onKeyDown = async (event) => {\n        if (event.key === 'Escape') {\n          this.setState({\n            isInputState: false,\n            inputValue: ''\n          });\n        }\n    \n        if (event.key === 'Enter') {\n            const orderArrName = this.state.inputValue;\n\n            this.setState({\n                isInputState: false,\n                inputValue: ''\n            })\n            const orderArr = { name: orderArrName, orders: [] };\n            await addFlorist(orderArr);\n            this.props.addFloristDispatch(orderArr);\n        }\n    }\n    \n    onInputChange = (event) => {\n        this.setState({\n            inputValue: event.target.value\n        });\n    }\n\n    render() {\n        const { inputValue, isInputActive } = this.state;\n\n        return (\n            <Fragment>\n                <header id=\"main-header\">\n                    Flower Shop\n                </header>\n                <main id=\"main-container\">\n                    {this.props.florists.map((orderArr, index) => (\n                        <Florist key={`orderarr-${index}`} orderArrId={index}/>\n                    ))}\n                    <div className=\"orderarr\">\n                    {isInputActive && <input\n                        type=\"text\"\n                        id=\"add-orderarr-input\"\n                        placeholder=\"Название вакансии \"\n                        value={inputValue}\n                        onChange={this.onInputChange}\n                        onKeyDown={this.onKeyDown}\n                    />}\n                    {!isInputActive && <header className=\"orderarr-name\" onClick={this.inputFlorist}>\n                        НОВАЯ ВАКАНСИЯ\n                    </header>}\n                    </div>\n                </main>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = ({ florists }) => ({ florists });\n\nconst mapDispatchToProps = dispatch => ({\n    addFloristDispatch: (orderArr) => dispatch(addFloristAction(orderArr)),\n    downloadOrdersDataDispatch: (florists) => dispatch(downloadOrdersDataAction(florists)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import {\n    ADD_FLORIST,\n    ADD_ORDER,\n    EDIT_ORDER_NAME,\n    EDIT_ORDER_AUTHOR,\n    REMOVE_ORDER,\n    DOWNLOAD_ORDERS_DATA,\n    MOVE_ORDER_LEFT,\n    MOVE_ORDER_RIGHT\n} from './actions';\n\nconst initialState = {\n    florists: []\n};\n\nexport default function reducer(state=initialState, {type, payload}) {\n    let orderToMove = null;\n\n    switch(type) {\n    case ADD_FLORIST:\n        return {\n            ...state,\n            florists: [\n                ...state.florists, payload\n            ]\n        };\n    case ADD_ORDER:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: [...orderArr.orders, payload.order]\n                }\n                : orderArr\n            ))\n        };\n    case EDIT_ORDER_NAME:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.map((order, indexOrder) => (\n                        indexOrder === payload.orderId ? {\n                            ...order,\n                            name: payload.newName\n                        }\n                        : order\n                    ))\n                }\n                : orderArr\n            ))\n        };\n    case EDIT_ORDER_AUTHOR:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.map((order, indexOrder) => (\n                        indexOrder === payload.orderId ? {\n                            ...order,\n                            author: payload.newAuthor\n                        }\n                        : order\n                    ))\n                }\n                : orderArr\n            ))\n        };\n    case REMOVE_ORDER:\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => (\n                index === payload.orderArrId ? {\n                    ...orderArr,\n                    orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                }\n                : orderArr\n            ))\n        };\n    case DOWNLOAD_ORDERS_DATA:\n        return {\n            ...state,\n            florists: payload\n        }\n    case MOVE_ORDER_LEFT:\n        orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => {\n                if (index === payload.orderArrId) {\n                    return {\n                        ...orderArr,\n                        orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                    };\n                }\n                if (index === payload.orderArrId - 1) {\n                    return {\n                        ...orderArr,\n                        orders: [...orderArr.orders, orderToMove]\n                    };\n                }\n                return orderArr;\n            })\n        };\n    case MOVE_ORDER_RIGHT:\n        orderToMove = state.florists[payload.orderArrId].orders[payload.orderId];\n\n        return {\n            ...state,\n            florists: state.florists.map((orderArr, index) => {\n                if (index === payload.orderArrId) {\n                    return {\n                        ...orderArr,\n                        orders: orderArr.orders.filter((order, orderIndex) => (orderIndex !== payload.orderId))\n                    };\n                }\n                if (index === payload.orderArrId + 1) {\n                    return {\n                        ...orderArr,\n                        orders: [...orderArr.orders, orderToMove]\n                    };\n                }\n                return orderArr;\n            })\n        };\n    default:\n        return state;\n    }\n};\n","import { applyMiddleware, createStore} from 'redux';\nimport logger from 'redux-logger';\nimport reducer from './reducer';\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(logger)\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}